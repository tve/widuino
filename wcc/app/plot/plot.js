(function() {
  var ng, plotCtrl;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('plot', {
      url: '/plot',
      templateUrl: '/plot/plot.html',
      controller: plotCtrl
    });
    return navbarProvider.add('/plot', 'Plot', 30);
  });

  plotCtrl = function($scope, jeebus) {
    var adjust, drivers, fetchPlot, handlePlotData, rowHandler, setPlot, setup, updatePlot;
    drivers = {};
    handlePlotData = function(row, key, value) {
      var s, time;
      s = $scope.series[row];
      if (s != null) {
        if (s.values == null) {
          s.values = [];
        }
        time = parseFloat(key);
        return s.values.push([time, value]);
      }
    };
    fetchPlot = function(rowIx) {
      var now, readings, row, sensor;
      readings = $scope.readings;
      if (readings.length > rowIx) {
        row = readings[rowIx];
        if ($scope.series == null) {
          $scope.series = [];
        }
        $scope.series[0] = {
          dbkey: "" + row.loc + "/" + row.param,
          label: "" + row.loc + " " + row.param,
          start: 0,
          end: 0,
          values: []
        };
        sensor = "sensor/" + $scope.series[0].dbkey;
        console.log("Fetching plot data for", sensor);
        now = (new Date()).getTime();
        return jeebus.timeRange(sensor, now - 3600 * 1000, now, 150, angular.bind(this, handlePlotData, 0)).on('sync', function() {
          return updatePlot(0);
        });
      }
    };
    updatePlot = function(rowIx) {
      var series, sorter;
      series = $scope.series[rowIx];
      console.log("Displaying plot", series.label, "with", series.values.length, "points");
      sorter = function(d) {
        return d[0];
      };
      if ($scope.flotData == null) {
        $scope.flotData = [];
      }
      return $scope.flotData[0] = {
        label: series.label,
        data: _.sortBy(series.values, sorter)
      };
    };
    setPlot = function(rowIx) {
      $scope.plotRow = rowIx;
      if ($scope.flotData == null) {
        $scope.flotData = [];
      }
      $scope.flotOptions = {
        xaxis: {
          mode: "time"
        }
      };
      return fetchPlot(rowIx);
    };
    rowHandler = function(key, row) {
      var id, loc, ms, param, raw, typ, val;
      loc = row.loc, ms = row.ms, val = row.val, typ = row.typ;
      for (param in val) {
        raw = val[param];
        id = "" + key + " - " + param;
        this.set(id, adjust({
          loc: loc,
          param: param,
          raw: raw,
          ms: ms,
          typ: typ
        }));
        if (this.keys[id] === 0) {
          fetchPlot(0);
        }
        console.log("set", id, "to", adjust({
          loc: loc,
          param: param,
          raw: raw,
          ms: ms,
          typ: typ
        }));
      }
      return null;
    };
    adjust = function(row) {
      var info;
      row.value = row.raw;
      info = drivers.get("" + row.typ + "/" + row.param);
      if (info != null) {
        row.param = info.name;
        row.unit = info.unit;
        if (info.factor) {
          row.value *= info.factor;
        }
        if (info.scale < 0) {
          row.value *= Math.pow(10, -info.scale);
        } else if (info.scale >= 0) {
          row.value /= Math.pow(10, info.scale);
          row.value = row.value.toFixed(info.scale);
        }
      }
      return row;
    };
    setup = function() {
      return drivers = jeebus.attach('driver').on('sync', function() {
        return jeebus.attach('reading', rowHandler).on('init', function() {
          $scope.readings = this.rows;
          return setPlot(0);
        });
      });
    };
    if ($scope.serverPlot === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
